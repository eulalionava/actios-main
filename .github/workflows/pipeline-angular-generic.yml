name: Workflow Pipeline CI Frontend
on:
  workflow_call:
    inputs:
      docker-tag-prefix:
        description: "Docker Tag Prefix"
        required: true
        type: string
        default: dev-
      run-unit-tests:
        description: "true/false run unit tests"
        required: false
        type: string
        default: "false"
      docker-in-login:
        description: "true/false run unit tests"
        required: false
        type: boolean
        default: true
      run-replace:
        description: "replace values"
        required: false
        type: boolean
        default: true
      node-version:
        description: "Node version"
        required: false
        type: string
        default: "20.x"
      keyvault-secret-list:
        description: "Space Separated List of variables from Keyvault (compilation)"
        required: false
        type: string
        default: ""
      keyvault-name:
        description: "Keyvault name"
        required: false
        type: string
        default: "OXZKVMDPD01"
      keyvault-secret-prefix:
        description: "Prefix to remove on each secret"
        required: false
        type: string
        default: "OXZKVSD-"
      project-key:
        description: "Project key, names the image name in ACR"
        required: true
        type: string
        default: ""
      base-dir:
        description: "Base dir location for pom and Dockerfile"
        required: false
        type: string
        default: "Frontend/"
      docker-in-registry:
        description: "login registry for pull images"
        required: false
        type: string
        default: "registry.redhat.io"
      base-href:
        description: "Base href for app"
        required: true
        type: string
      portal_id:
        description: "2,3 Letter Portal ID"
        required: true
        type: string      
    secrets:
      azure-creds:
        description: "Credentials for azure"
        required: false
      azure-client-id:
        description: "Credentials for azure"
        required: false
      azure-client-secret:
        description: "Credentials for azure"
        required: false
      azure-tenant-id:
        description: "Credentials for azure"
        required: false
      docker-in-username:
        description: "login username for pull images"
        required: true
      docker-in-password:
        description: "login password for pull images"
        required: true
      docker-out-registry:
        description: "login registry for push images"
        required: true
      docker-out-username:
        description: "login username for push images"
        required: true
      docker-out-password:
        description: "login password for push images"
        required: true

    outputs:
      docker-final-tag: 
        description: "Final Tag"
        value: ${{ jobs.pipeline-ci.outputs.docker-final-tag }}
permissions: write-all
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      runner: ${{ steps.checkunittests.outputs.runner }}
    steps:
    - name: Check unit tests
      id: checkunittests
      run: |
        if [ "${{ inputs.run-unit-tests }}" = "true" ] ; then
          echo "runner=GJAR" >> $GITHUB_OUTPUT
        else
          echo "runner=ubuntu-latest" >> $GITHUB_OUTPUT
        fi
  pipeline-ci:
    name: Pipeline CI Frontend java
    needs: [setup]
    runs-on: ${{ needs.setup.outputs.runner }}
    outputs:
      docker-final-tag: ${{ steps.out.outputs.docker-final-tag }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup npm and node
        uses: BUS-BackOffice/WEB_CI_CD_F2OXXO/.github/actions/composite/common/setup-node@develop
        with:
          node-version: ${{ inputs.node-version }}
      - name: Secrets
        uses: BUS-BackOffice/WEB_CI_CD_F2OXXO/.github/actions/composite/azure/keyvault@develop
        if: inputs.run-replace
        with:
          keyvault-name: ${{ inputs.keyvault-name }}
          keyvault-secret-list: ${{ inputs.keyvault-secret-list }}
          keyvault-prefix: ${{ inputs.keyvault-secret-prefix }}
          azure-creds: ${{ secrets.azure-creds }}
          azure-client-id: ${{ secrets.azure-client-id }}
          azure-client-secret: ${{ secrets.azure-client-secret }}
          azure-tenant-id: ${{ secrets.azure-tenant-id }}
      - name: Backend Endpoint name
        run: |
          echo "backname=${{ inputs.portal_id }}_URL_BACK" >> $GITHUB_ENV
      - name: Get SHA
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Build
        uses: BUS-BackOffice/WEB_CI_CD_F2OXXO/.github/actions/composite/node/build@develop
        with:
          project-key: ${{ inputs.project-key }}
          base-dir: ${{ inputs.base-dir }}
          base-href: "${{inputs.base-href}}"
          replace-envs: ${{ inputs.run-replace }}
          backend-endpoint: ${{ env[env.backname] }}
          auth-endpoint: ${{ env.AC_URL_BACK }}
          ac-start-endpoint: ${{ env.AC_URL_START }}
          git-sha: ${{ steps.sha.outputs.sha_short }}
      - name: Docker Push
        uses: BUS-BackOffice/WEB_CI_CD_F2OXXO/.github/actions/composite/common/docker-push@develop
        with:
          project-key: ${{ inputs.project-key }}
          docker-in-login: ${{ inputs.docker-in-login }}
          docker-in-registry: ${{ inputs.docker-in-registry }}
          docker-in-username: "18181889|oxxocicd"
          docker-in-password: "eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiI2YjUwZTFkY2YyZTE0ZmI1OGFlODYzODYzZmZmY2JkNSJ9.BgIHBvZCs_BILUTIKUDJKo4IBA-ob5adspJUl1-xomMXHW1IYhGMyzZ4WTlcIJCb-s9Ny2e-lCNfQxRnLn9u7Kr-O9QY7Clv5h9nWiH-Rf06aQEqRj3aiBvva3uq-1AzHG3pPq3k7IL_gI0jov2iQ-tHBPsZWq7ekkjoQYZzdU9nW6tZXcKUmWw6qNpanCW-5gjCrgW4RdAcQYaaPrAD7eEW7rUsdLh1S7NKMDTn06RLDgcaMC26991nN1XOCTSUEYf4XW66wLZi8kqR8NaLQf-e9EvAp4S5werZgcPRudbHwW1sBFyTbT9Zp75_hkLLia80nHgyk6Ye4dwg8nrgKw9jFlBirLx1ZggnOK2Mg1Rd5fLLsNG6If4tOYp0mUAL1ZxrqckLdfqD2XpRY4joHvG5UoN8P7zckmSKb2C6kD3hb1OoAgTNXG3AHTtSLtdH8nG7cu7y43x-_gnoa3Ev25JrY8doVSR2co-EEh84VOCrxWo9ht78XniC1fI5TeW7_4gnJawJXpilFdjgneU8lRcutVtbhdYg6r9bCCBQmm8k6oYA6o2vwZU4F_F4EBw-Iun1fFmY9s3ReQsfw_TK6XIM24YEuuH8K3B9E5zMJ1VvrkQblTvwIXcS7uxE_eWvPQYRi2sOwmMTWg2uZFNKyET-x3aF_usmb0dtCAO2Gek"
          docker-out-registry: ${{ secrets.docker-out-registry }}
          docker-out-username: ${{ secrets.docker-out-username }}
          docker-out-password: ${{ secrets.docker-out-password }}
          docker-tag: ${{ inputs.docker-tag-prefix }}${{ steps.sha.outputs.sha_short }}
          base-dir: ${{ inputs.base-dir }}
          art-location: dist
      - name: Output
        id: out
        run: echo "docker-final-tag=${{ inputs.docker-tag-prefix }}${{ steps.sha.outputs.sha_short }}" >> $GITHUB_OUTPUT

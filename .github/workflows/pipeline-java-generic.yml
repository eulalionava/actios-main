name: Workflow Pipeline CI Backend
on:
  workflow_call:
    inputs:
      docker-tag-prefix:
        description: "Docker Tag Prefix"
        required: true
        type: string
        default: dev-
      run-unit-tests:
        description: "true/false run unit tests"
        required: false
        type: string
        default: "false"
      docker-in-login:
        description: "true/false run unit tests"
        required: false
        type: boolean
        default: true
      java-version:
        description: "Java version"
        required: false
        type: string
        default: "17"
      mvn-version:
        description: "Maven version"
        required: false
        type: string
        default: "3.9.6"
      keyvault-secret-list:
        description: "Space Separated List of variables from Keyvault (unit tests)"
        required: false
        type: string
        default: ""
      keyvault-name:
        description: "Keyvault name"
        required: false
        type: string
        default: "OXZKVMDPD01"
      keyvault-secret-prefix:
        description: "Prefix to remove on each secret"
        required: false
        type: string
        default: "OXZKVSD-"
      project-key:
        description: "Project key, names the image name in ACR"
        required: true
        type: string
        default: ""
      runtime-env:
        description: "Identifier for compilation"
        required: false
        type: string
        default: "war"
      base-dir:
        description: "Base dir location for pom and Dockerfile"
        required: false
        type: string
        default: "Backend/"
    secrets:
      docker-in-registry:
        description: "login registry for pull images"
        required: false
      azure-creds:
        description: "Credentials for azure"
        required: true
      docker-in-username:
        description: "login username for pull images"
        required: true
      docker-in-password:
        description: "login password for pull images"
        required: true
      docker-out-registry:
        description: "login registry for push images"
        required: true
      docker-out-username:
        description: "login username for push images"
        required: true
      docker-out-password:
        description: "login password for push images"
        required: true
    outputs:
      docker-final-tag: 
        description: "Final Tag"
        value: ${{ jobs.pipeline-ci.outputs.docker-final-tag }}
permissions: write-all
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      runner: ${{ steps.checkunittests.outputs.runner }}
    steps:
    - name: Check unit tests
      id: checkunittests
      run: |
        if [ "${{inputs.run-unit-tests}}" = "true" ] ; then
          echo "runner=GJAR" >> $GITHUB_OUTPUT
        else
          echo "runner=ubuntu-latest" >> $GITHUB_OUTPUT
        fi
  pipeline-ci:
    name: Pipeline CI Backend java
    needs: setup
    runs-on: ${{ needs.setup.outputs.runner }}
    if: contains(fromJson('["dev-", "feat-"]'), inputs.docker-tag-prefix)
    outputs:
      docker-final-tag: ${{ steps.out.outputs.docker-final-tag }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup mvn and java
        uses: BUS-BackOffice/WEB_CI_CD_F2OXXO/.github/actions/composite/common/setup-maven@develop
        with:
          java-version: ${{ inputs.java-version }}
          maven-version: ${{ inputs.mvn-version }}
      - name: Secrets
        uses: BUS-BackOffice/WEB_CI_CD_F2OXXO/.github/actions/composite/azure/keyvault@develop
        if: inputs.run-unit-tests == 'true'
        with:
          keyvault-name: ${{ inputs.keyvault-name }}
          keyvault-secret-list: ${{ inputs.keyvault-secret-list }}
          keyvault-prefix: ${{ inputs.keyvault-secret-prefix }}
          azure-creds: ${{ secrets.azure-creds }}
      - name: Build
        uses: BUS-BackOffice/WEB_CI_CD_F2OXXO/.github/actions/composite/springboot/build@develop
        with:
          project-key: ${{ inputs.project-key }}
          runtime-environment: ${{ inputs.runtime-env }}
          pom-location: ${{ inputs.base-dir }}
          run-unit-tests: ${{ inputs.run-unit-tests }}
      - name: Get SHA
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Docker Push
        uses: BUS-BackOffice/WEB_CI_CD_F2OXXO/.github/actions/composite/common/docker-push@develop
        with:
          project-key: ${{ inputs.project-key }}
          docker-in-login: ${{ inputs.docker-in-login }}
          docker-in-registry: ${{ secrets.docker-in-registry }}
          docker-in-username: ${{ secrets.docker-in-username }}
          docker-in-password: ${{ secrets.docker-in-password }}
          docker-out-registry: ${{ secrets.docker-out-registry }}
          docker-out-username: ${{ secrets.docker-out-username }}
          docker-out-password: ${{ secrets.docker-out-password }}
          docker-tag: ${{ inputs.docker-tag-prefix }}${{ steps.sha.outputs.sha_short }}
          base-dir: ${{ inputs.base-dir }}
          art-location: target
      - name: Output
        id: out
        run: echo "docker-final-tag=${{ inputs.docker-tag-prefix }}${{ steps.sha.outputs.sha_short }}" >> $GITHUB_OUTPUT